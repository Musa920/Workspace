

var javascript高级_day01 = {
	"回到顶部案例" : [
					"一般网站都会有页面滚动事件, 还有头部导航固定和返回顶部的功能",
					"如果需要完成功能, 则需要判断当前网页的卷去头部, 这个值有兼容问题",
					"完成头部固定功能步骤如下: ",
						" 获取页面的被卷去的值,  进行判断",
						" 当它大于某一个值的时候, 添加一个类名, 反之则移除类名",
						// 当拥有这个类名则会执行css中的过渡和其他设置
					"完成返回顶部功能步骤如下: ",
						" 将封装的动画算法拿出来, 进行内部改造",
						" 将存储定时器的变量拿出来, 获取的值使用封装的函数",
						" 设置的值给html标签设置",
				    clearInterval(timer);
				    var timer = setInterval(function () {
				        var leader = getScroll().scrollTop;
				        var step = 10;
				        step = leader < 0 ? step : -step;//step有了正负
				        if (Math.abs(leader - 0) >= Math.abs(step)) {
				            leader = leader + step;
				            document.document.documentElement.scrollTop = leader
				        } else {
				            document.document.documentElement.scrollTop = 0
				            clearInterval(timer);
				        }
				    }, 15);
					],
	"京东首页-tab栏" : [
				   "结构上另外写一个小盒子作为底部滑动的边框",
				   "给头部的盒子批量注册事件, 自定义属性",
				   		"排他思想, 拿到当前索引, 调用动画函数, 移动边框位置 ",
				   		"根据排他思想显示对应的盒子 ",
		 		   "为什么还要回来一些像素 ",
				   		"为了更加好看 ",
				   	"还可以应用于哪些案例?",
				   		"作为背景的移动, 不过要累积宽度 "
					],
	"复习javascript" : [
				   "ECMAScript语法复习",
		 		   "BOM复习",
		 		   "DOM复习"
					],
	"对象的创建方式" : [
		 		   " 1.0 new Object() ",
		 		   		" 通过new出来的对象, 可以通过打点或者中括号的方式设置属性和方法",
		 		   " 2.0 {} ",
		 		   		" 字面量方式创建比较方便, 属性和方法的设置可以按照json的格式",
		 		   		" 也就是键值对的方式 ",
		 		   " 3.0 工厂模式 ",
		 		   		" 可以把创建对象的流程封装到一个函数中, 通过return返回",
		 		   		" 每一次调用函数就会新建一个对象",
		 		   " 4.0 构造函数 ",
		 		   		" 构造函数的名字为了方便识别, 一般首字母大写 ",
		 		   		" 通过this在函数内部设置属性 ",
		 		   		" 因为不被调用的函数不会执行, 所以不用担心this的指向问题 ",
		 		   		" 实例出一个对象的方式是通过new关键字 ",
		 		   			// 1 会在内存中创建一个空对象
						    // 2 设置构造函数的this，让this指向刚刚创建好的对象
						    // 3 执行构造函数中的代码
						    // 4 返回对象
					],
	"原型的引出" : [
				   "通过构造函数设计完了对象的模板数据",
		 		   		"如果在构造函数之外给构造函数赋值的属性和其他内容, 实例对象访问不到",
		 		   "1.0 将所需要的功能都设计在构造函数中",
		 		   		" 对象在实例后, 每个实例将会存储相同的方法, 有点消耗内存",
		 		   "2.0 在全局声明方法函数, 构造函数中中, 只保留函数名",
		 		   		" 全局声明的函数后期可能会存在命名冲突",
		 		   		" 如果出现太多功能函数, 后期不方便管理",
		 		   "3.0 每一个构造函数都会有一个叫做prototype的属性",
		 		   		" 这个属性是一个对象, 对象可以赋值",
		 		   		" 通过原型绑定的方法, 不同的实例都能直接访问",
					]
	// tips : 总结, 面向对象开发中, 属性写在构造函数中, 方法写在原型中 
}